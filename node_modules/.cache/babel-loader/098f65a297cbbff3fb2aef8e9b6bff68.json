{"ast":null,"code":"var _jsxFileName = \"/home/troias/udemy/project-7/01-starting-project/src/components/SimpleInput.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst SimpleInput = props => {\n  _s();\n\n  const [enteredName, setEnteredName] = useState(\"\");\n  const [enteredNameIsValid, setEnteredNameIsValid] = useState(false);\n  const [enteredNameTouched, setEnteredNameTouched] = useState(false);\n\n  const addInputNameHandler = event => {\n    event.preventDefault();\n    setEnteredName(event.target.value);\n\n    if (event.target.value.trim() !== \"\") {\n      setEnteredNameIsValid(true);\n      return;\n    }\n\n    console.log(enteredName);\n  };\n\n  const formSubmitHandler = event => {\n    event.preventDefault();\n    setEnteredNameTouched(true);\n\n    if (enteredName.trim() === \"\") {\n      setEnteredNameIsValid(false);\n      return;\n    }\n\n    setEnteredNameIsValid(true);\n  };\n\n  const nameInputBlurHandler = event => {\n    event.preventDefault();\n    setEnteredNameTouched(true);\n\n    if (enteredName.trim() === \"\") {\n      setEnteredNameIsValid(false);\n      return;\n    }\n  };\n\n  const nameInputIsInvalid = !enteredNameIsValid && enteredNameTouched;\n  const nameInputClasses = nameInputIsInvalid ? 'form-control invalid' : 'form-control';\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: formSubmitHandler,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: nameInputClasses,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"name\",\n        children: \" Your Name \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"name\",\n        onChange: addInputNameHandler,\n        onBlur: nameInputBlurHandler\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this), nameInputIsInvalid && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error-text\",\n        children: \" Cannot be empty \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 32\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-actions\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 5\n  }, this);\n};\n\n_s(SimpleInput, \"E+J08VDKU5xPbhzR5ys5bmcr9/o=\");\n\n_c = SimpleInput;\nexport default SimpleInput;\n\nvar _c;\n\n$RefreshReg$(_c, \"SimpleInput\");","map":{"version":3,"sources":["/home/troias/udemy/project-7/01-starting-project/src/components/SimpleInput.js"],"names":["useState","useEffect","SimpleInput","props","enteredName","setEnteredName","enteredNameIsValid","setEnteredNameIsValid","enteredNameTouched","setEnteredNameTouched","addInputNameHandler","event","preventDefault","target","value","trim","console","log","formSubmitHandler","nameInputBlurHandler","nameInputIsInvalid","nameInputClasses"],"mappings":";;;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;;;AAEA,MAAMC,WAAW,GAAIC,KAAD,IAAW;AAAA;;AAI7B,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCL,QAAQ,CAAC,EAAD,CAA9C;AACA,QAAM,CAACM,kBAAD,EAAqBC,qBAArB,IAA8CP,QAAQ,CAAC,KAAD,CAA5D;AACA,QAAM,CAACQ,kBAAD,EAAqBC,qBAArB,IAA8CT,QAAQ,CAAC,KAAD,CAA5D;;AAIA,QAAMU,mBAAmB,GAAIC,KAAD,IAAW;AACrCA,IAAAA,KAAK,CAACC,cAAN;AACAP,IAAAA,cAAc,CAACM,KAAK,CAACE,MAAN,CAAaC,KAAd,CAAd;;AAEA,QAAIH,KAAK,CAACE,MAAN,CAAaC,KAAb,CAAmBC,IAAnB,OAA8B,EAAlC,EAAsC;AACpCR,MAAAA,qBAAqB,CAAC,IAAD,CAArB;AACA;AACD;;AAGDS,IAAAA,OAAO,CAACC,GAAR,CAAYb,WAAZ;AACD,GAXD;;AAaA,QAAMc,iBAAiB,GAAIP,KAAD,IAAW;AACnCA,IAAAA,KAAK,CAACC,cAAN;AAEAH,IAAAA,qBAAqB,CAAC,IAAD,CAArB;;AACA,QAAIL,WAAW,CAACW,IAAZ,OAAuB,EAA3B,EAA+B;AAC7BR,MAAAA,qBAAqB,CAAC,KAAD,CAArB;AACA;AACD;;AACDA,IAAAA,qBAAqB,CAAC,IAAD,CAArB;AAMD,GAdD;;AAeA,QAAMY,oBAAoB,GAAIR,KAAD,IAAW;AACtCA,IAAAA,KAAK,CAACC,cAAN;AACAH,IAAAA,qBAAqB,CAAC,IAAD,CAArB;;AACA,QAAIL,WAAW,CAACW,IAAZ,OAAuB,EAA3B,EAA+B;AAC7BR,MAAAA,qBAAqB,CAAC,KAAD,CAArB;AACA;AACD;AAEF,GARD;;AAUA,QAAMa,kBAAkB,GAAG,CAACd,kBAAD,IAAuBE,kBAAlD;AACA,QAAMa,gBAAgB,GAAGD,kBAAkB,GAAG,sBAAH,GAA4B,cAAvE;AAEA,sBACE;AAAM,IAAA,QAAQ,EAAEF,iBAAhB;AAAA,4BACE;AAAK,MAAA,SAAS,EAAEG,gBAAhB;AAAA,8BACE;AAAO,QAAA,OAAO,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAQ,QAAA,IAAI,EAAC,MAAb;AAAoB,QAAA,EAAE,EAAC,MAAvB;AAA8B,QAAA,QAAQ,EAAEX,mBAAxC;AAA6D,QAAA,MAAM,EAAES;AAArE;AAAA;AAAA;AAAA;AAAA,cAFF,EAGGC,kBAAkB,iBAAI;AAAG,QAAA,SAAS,EAAE,YAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAHzB;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAME;AAAK,MAAA,SAAS,EAAC,cAAf;AAAA,6BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YANF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAYD,CA/DD;;GAAMlB,W;;KAAAA,W;AAiEN,eAAeA,WAAf","sourcesContent":["import { useState, useEffect } from \"react\"\n\nconst SimpleInput = (props) => {\n\n\n\n  const [enteredName, setEnteredName] = useState(\"\")\n  const [enteredNameIsValid, setEnteredNameIsValid] = useState(false)\n  const [enteredNameTouched, setEnteredNameTouched] = useState(false)\n\n\n\n  const addInputNameHandler = (event) => {\n    event.preventDefault()\n    setEnteredName(event.target.value)\n\n    if (event.target.value.trim() !== \"\") {\n      setEnteredNameIsValid(true)\n      return\n    }\n\n    \n    console.log(enteredName)\n  }\n\n  const formSubmitHandler = (event) => {\n    event.preventDefault()\n\n    setEnteredNameTouched(true)\n    if (enteredName.trim() === \"\") {\n      setEnteredNameIsValid(false)\n      return\n    }\n    setEnteredNameIsValid(true)\n\n   \n    \n \n\n  }\n  const nameInputBlurHandler = (event) => {\n    event.preventDefault()\n    setEnteredNameTouched(true)\n    if (enteredName.trim() === \"\") {\n      setEnteredNameIsValid(false)\n      return\n    }\n\n  }\n\n  const nameInputIsInvalid = !enteredNameIsValid && enteredNameTouched\n  const nameInputClasses = nameInputIsInvalid ? 'form-control invalid' : 'form-control'\n\n  return (\n    <form onSubmit={formSubmitHandler}>\n      <div className={nameInputClasses}>\n        <label htmlFor='name'> Your Name </label>\n        <input  type='text' id='name' onChange={addInputNameHandler} onBlur={nameInputBlurHandler} />\n        {nameInputIsInvalid && <p className={\"error-text\"}> Cannot be empty </p>}\n      </div>\n      <div className=\"form-actions\">\n        <button>Submit</button>\n      </div>\n    </form>\n  );\n};\n\nexport default SimpleInput;\n"]},"metadata":{},"sourceType":"module"}