{"ast":null,"code":"var _jsxFileName = \"/home/troias/udemy/project-7/01-starting-project/src/components/SimpleInput.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\";\nimport useInput from '../customHooks/useInput';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst SimpleInput = props => {\n  _s();\n\n  const emailValidation = value => {\n    value.includes('@');\n  };\n\n  const nameInputValidation = value => {\n    value => value.trim() !== \"\";\n  };\n\n  const {\n    value: enteredNameValue,\n    hasError: nameInputError,\n    valueChangedHandler: nameChangeHandler,\n    InputBlurHandler: nameInputBlurHandler,\n    isValid: valueIsValid,\n    reset: resetInput\n  } = useInput();\n  const {\n    value: enteredEmailValue,\n    hasError: emailInputError,\n    valueChangedHandler: emailChangeHandler,\n    InputBlurHandler: emailInputBlurHandler,\n    isValid: emailIsValid,\n    reset: resetEmail\n  } = useInput(emailValidation);\n\n  const formSubmitHandler = event => {\n    event.preventDefault();\n    nameInputBlurHandler(true);\n\n    if (!emailIsValid) {\n      return;\n    }\n\n    resetInput();\n    resetEmail();\n  };\n\n  const nameInputClasses = nameInputError ? 'form-control invalid' : 'form-control';\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: formSubmitHandler,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: nameInputClasses,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"name\",\n        children: \" Your Name \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"name\",\n        value: enteredNameValue,\n        onChange: nameChangeHandler,\n        onBlur: nameInputBlurHandler\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"email\",\n        id: \"email\",\n        value: enteredEmailValue,\n        onChange: emailChangeHandler,\n        onBlur: emailInputBlurHandler\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 12\n      }, this), nameInputError && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error-text\",\n        children: \" Cannot be empty \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 28\n      }, this), emailInputError && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error-text\",\n        children: \" Does not include \\\"@\\\" \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 29\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-actions\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        disabled: !valueIsValid,\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 5\n  }, this);\n};\n\n_s(SimpleInput, \"OV1nhSJ5g53etCgSlp08Q1F5yZc=\", false, function () {\n  return [useInput, useInput];\n});\n\n_c = SimpleInput;\nexport default SimpleInput;\n\nvar _c;\n\n$RefreshReg$(_c, \"SimpleInput\");","map":{"version":3,"sources":["/home/troias/udemy/project-7/01-starting-project/src/components/SimpleInput.js"],"names":["useState","useEffect","useInput","SimpleInput","props","emailValidation","value","includes","nameInputValidation","trim","enteredNameValue","hasError","nameInputError","valueChangedHandler","nameChangeHandler","InputBlurHandler","nameInputBlurHandler","isValid","valueIsValid","reset","resetInput","enteredEmailValue","emailInputError","emailChangeHandler","emailInputBlurHandler","emailIsValid","resetEmail","formSubmitHandler","event","preventDefault","nameInputClasses"],"mappings":";;;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,OAAOC,QAAP,MAAqB,yBAArB;;;AAEA,MAAMC,WAAW,GAAIC,KAAD,IAAW;AAAA;;AAE7B,QAAMC,eAAe,GAAIC,KAAD,IAAW;AACjCA,IAAAA,KAAK,CAACC,QAAN,CAAe,GAAf;AACD,GAFD;;AAGA,QAAMC,mBAAmB,GAAIF,KAAD,IAAW;AACrCA,IAAAA,KAAK,IAAIA,KAAK,CAACG,IAAN,OAAiB,EAA1B;AACD,GAFD;;AAIA,QAAM;AACJH,IAAAA,KAAK,EAAEI,gBADH;AAEJC,IAAAA,QAAQ,EAAEC,cAFN;AAGJC,IAAAA,mBAAmB,EAAEC,iBAHjB;AAIJC,IAAAA,gBAAgB,EAAEC,oBAJd;AAKJC,IAAAA,OAAO,EAAEC,YALL;AAMJC,IAAAA,KAAK,EAAEC;AANH,MAOFlB,QAAQ,EAPZ;AASA,QAAM;AACJI,IAAAA,KAAK,EAAEe,iBADH;AAEJV,IAAAA,QAAQ,EAAEW,eAFN;AAGJT,IAAAA,mBAAmB,EAAEU,kBAHjB;AAIJR,IAAAA,gBAAgB,EAAES,qBAJd;AAKJP,IAAAA,OAAO,EAAEQ,YALL;AAMJN,IAAAA,KAAK,EAAEO;AANH,MAOFxB,QAAQ,CAACG,eAAD,CAPZ;;AAaA,QAAMsB,iBAAiB,GAAIC,KAAD,IAAW;AACnCA,IAAAA,KAAK,CAACC,cAAN;AACAb,IAAAA,oBAAoB,CAAC,IAAD,CAApB;;AAEA,QAAI,CAACS,YAAL,EAAmB;AACjB;AACD;;AACDL,IAAAA,UAAU;AACVM,IAAAA,UAAU;AACX,GATD;;AAYA,QAAMI,gBAAgB,GAAGlB,cAAc,GAAG,sBAAH,GAA4B,cAAnE;AAEA,sBACE;AAAM,IAAA,QAAQ,EAAEe,iBAAhB;AAAA,4BACE;AAAK,MAAA,SAAS,EAAEG,gBAAhB;AAAA,8BACE;AAAO,QAAA,OAAO,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AACE,QAAA,IAAI,EAAC,MADP;AAEE,QAAA,EAAE,EAAC,MAFL;AAGE,QAAA,KAAK,EAAEpB,gBAHT;AAIE,QAAA,QAAQ,EAAEI,iBAJZ;AAKE,QAAA,MAAM,EAAEE;AALV;AAAA;AAAA;AAAA;AAAA,cAFF,eAQK;AACD,QAAA,IAAI,EAAC,OADJ;AAED,QAAA,EAAE,EAAC,OAFF;AAGD,QAAA,KAAK,EAAEK,iBAHN;AAID,QAAA,QAAQ,EAAEE,kBAJT;AAKD,QAAA,MAAM,EAAEC;AALP;AAAA;AAAA;AAAA;AAAA,cARL,EAcGZ,cAAc,iBAAI;AAAG,QAAA,SAAS,EAAE,YAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAdrB,EAeGU,eAAe,iBAAI;AAAG,QAAA,SAAS,EAAE,YAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAftB;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAkBE;AAAK,MAAA,SAAS,EAAC,cAAf;AAAA,6BACE;AAAQ,QAAA,QAAQ,EAAE,CAACJ,YAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YAlBF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAwBD,CArED;;GAAMf,W;UAgBAD,Q,EASAA,Q;;;KAzBAC,W;AAuEN,eAAeA,WAAf","sourcesContent":["import { useState, useEffect } from \"react\"\nimport useInput from '../customHooks/useInput'\n\nconst SimpleInput = (props) => {\n\n  const emailValidation = (value) => { \n    value.includes('@')\n  }\n  const nameInputValidation = (value) => { \n    value => value.trim() !== \"\"\n  }\n\n  const {\n    value: enteredNameValue, \n    hasError: nameInputError,\n    valueChangedHandler: nameChangeHandler,\n    InputBlurHandler: nameInputBlurHandler,\n    isValid: valueIsValid, \n    reset: resetInput\n  } = useInput()\n\n  const {\n    value: enteredEmailValue, \n    hasError: emailInputError,\n    valueChangedHandler: emailChangeHandler,\n    InputBlurHandler: emailInputBlurHandler,\n    isValid: emailIsValid, \n    reset: resetEmail\n  } = useInput(emailValidation)\n\n\n\n \n\n  const formSubmitHandler = (event) => {\n    event.preventDefault()\n    nameInputBlurHandler(true)\n\n    if (!emailIsValid) {\n      return\n    }\n    resetInput()\n    resetEmail()\n  }\n\n\n  const nameInputClasses = nameInputError ? 'form-control invalid' : 'form-control'\n\n  return (\n    <form onSubmit={formSubmitHandler}>\n      <div className={nameInputClasses}>\n        <label htmlFor='name'> Your Name </label>\n        <input\n          type='text'\n          id='name'\n          value={enteredNameValue}\n          onChange={nameChangeHandler}\n          onBlur={nameInputBlurHandler} />\n           <input\n          type='email'\n          id='email'\n          value={enteredEmailValue}\n          onChange={emailChangeHandler}\n          onBlur={emailInputBlurHandler} />\n        {nameInputError && <p className={\"error-text\"}> Cannot be empty </p>}\n        {emailInputError && <p className={\"error-text\"}> Does not include \"@\" </p>}\n      </div>\n      <div className=\"form-actions\">\n        <button disabled={!valueIsValid}>Submit</button>\n      </div>\n    </form>\n  );\n};\n\nexport default SimpleInput;\n"]},"metadata":{},"sourceType":"module"}