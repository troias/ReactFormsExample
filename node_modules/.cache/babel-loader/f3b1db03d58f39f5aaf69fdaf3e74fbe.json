{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useReducer } from 'react';\nconst defaultState = {\n  enteredValue: \"\",\n  touched: false,\n  valueIsValid: false,\n  hasError: false\n};\n\nconst useInput = validateValue => {\n  _s();\n\n  const inputReducer = (state, action) => {\n    switch (action.tye) {\n      case \"VALUE_CHANGED\":\n        return { ...state,\n          enteredValue: action.payload\n        };\n\n      case \"INPUT_BLUR\":\n        return { ...state,\n          touched: true\n        };\n\n      case \"RESET\":\n        return { ...state,\n          enteredValue: \"\",\n          touched: false\n        };\n\n      default:\n        break;\n    }\n  };\n\n  const [state, dispatch] = useReducer(inputReducer, defaultState);\n  state.valueIsValid = validateValue(state.enteredValue);\n  state.hasError = !state.valueIsValid && state.touched;\n\n  const valueChangedHandler = event => {\n    dispatch({\n      type: \"VALUE_CHANGED\",\n      payload: event.target.value\n    }); // setEnteredValue(event.target.value)\n  };\n\n  const InputBlurHandler = event => {\n    dispatch({\n      type: \"INPUT_BLUR\"\n    }); // setTouched(true)\n  };\n\n  const reset = () => {\n    dispatch({\n      type: \"INPUT_BLUR\"\n    }); // setEnteredValue(\"\")\n    // setTouched(false)\n  };\n\n  return {\n    value: state.enteredValue,\n    hasError: state.hasError,\n    valueChangedHandler,\n    InputBlurHandler,\n    reset,\n    isValid: state.valueIsValid\n  };\n};\n\n_s(useInput, \"zEDbosDjpARfUl0vNel/+uYp9FA=\");\n\nexport default useInput;","map":{"version":3,"sources":["/home/troias/udemy/project-7/01-starting-project/src/customHooks/useInput.js"],"names":["useReducer","defaultState","enteredValue","touched","valueIsValid","hasError","useInput","validateValue","inputReducer","state","action","tye","payload","dispatch","valueChangedHandler","event","type","target","value","InputBlurHandler","reset","isValid"],"mappings":";;AAAA,SAAUA,UAAV,QAA4B,OAA5B;AAEA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,YAAY,EAAE,EADG;AAEjBC,EAAAA,OAAO,EAAE,KAFQ;AAGjBC,EAAAA,YAAY,EAAE,KAHG;AAIjBC,EAAAA,QAAQ,EAAE;AAJO,CAArB;;AAOA,MAAMC,QAAQ,GAAIC,aAAD,IAAmB;AAAA;;AAEhC,QAAMC,YAAY,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACpC,YAAQA,MAAM,CAACC,GAAf;AACI,WAAK,eAAL;AAEI,eAAO,EACH,GAAGF,KADA;AAEHP,UAAAA,YAAY,EAAEQ,MAAM,CAACE;AAFlB,SAAP;;AAKJ,WAAK,YAAL;AACI,eAAO,EACH,GAAGH,KADA;AAEHN,UAAAA,OAAO,EAAE;AAFN,SAAP;;AAIJ,WAAK,OAAL;AACI,eAAO,EACH,GAAGM,KADA;AAEHP,UAAAA,YAAY,EAAE,EAFX;AAGHC,UAAAA,OAAO,EAAE;AAHN,SAAP;;AAMJ;AACI;AArBR;AAuBH,GAxBD;;AAyBA,QAAM,CAACM,KAAD,EAAQI,QAAR,IAAoBb,UAAU,CAACQ,YAAD,EAAeP,YAAf,CAApC;AAGCQ,EAAAA,KAAK,CAACL,YAAN,GAAqBG,aAAa,CAACE,KAAK,CAACP,YAAP,CAAlC;AACAO,EAAAA,KAAK,CAACJ,QAAN,GAAiB,CAACI,KAAK,CAACL,YAAP,IAAuBK,KAAK,CAACN,OAA9C;;AAED,QAAMW,mBAAmB,GAAIC,KAAD,IAAW;AACnCF,IAAAA,QAAQ,CAAC;AACLG,MAAAA,IAAI,EAAE,eADD;AAELJ,MAAAA,OAAO,EAAEG,KAAK,CAACE,MAAN,CAAaC;AAFjB,KAAD,CAAR,CADmC,CAKnC;AACH,GAND;;AAQA,QAAMC,gBAAgB,GAAIJ,KAAD,IAAW;AAChCF,IAAAA,QAAQ,CAAC;AACLG,MAAAA,IAAI,EAAE;AADD,KAAD,CAAR,CADgC,CAIhC;AACH,GALD;;AAOA,QAAMI,KAAK,GAAG,MAAM;AAChBP,IAAAA,QAAQ,CAAC;AACLG,MAAAA,IAAI,EAAE;AADD,KAAD,CAAR,CADgB,CAKhB;AACA;AACH,GAPD;;AASA,SAAO;AACHE,IAAAA,KAAK,EAAET,KAAK,CAACP,YADV;AAEHG,IAAAA,QAAQ,EAAEI,KAAK,CAACJ,QAFb;AAGHS,IAAAA,mBAHG;AAIHK,IAAAA,gBAJG;AAKHC,IAAAA,KALG;AAMHC,IAAAA,OAAO,EAAEZ,KAAK,CAACL;AANZ,GAAP;AASH,CAlED;;GAAME,Q;;AAoEN,eAAeA,QAAf","sourcesContent":["import {  useReducer } from 'react'\r\n\r\nconst defaultState = { \r\n    enteredValue: \"\", \r\n    touched: false, \r\n    valueIsValid: false,\r\n    hasError: false\r\n}\r\n\r\nconst useInput = (validateValue) => {\r\n\r\n    const inputReducer = (state, action) => {\r\n        switch (action.tye) {\r\n            case \"VALUE_CHANGED\":\r\n                \r\n                return {\r\n                    ...state, \r\n                    enteredValue: action.payload\r\n                }\r\n            \r\n            case \"INPUT_BLUR\":\r\n                return {\r\n                    ...state, \r\n                    touched: true\r\n                }\r\n            case \"RESET\":\r\n                return {\r\n                    ...state, \r\n                    enteredValue: \"\",\r\n                    touched: false\r\n                }\r\n\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n    const [state, dispatch] = useReducer(inputReducer, defaultState)\r\n \r\n\r\n     state.valueIsValid = validateValue(state.enteredValue)\r\n     state.hasError = !state.valueIsValid && state.touched\r\n\r\n    const valueChangedHandler = (event) => {\r\n        dispatch({ \r\n            type: \"VALUE_CHANGED\", \r\n            payload: event.target.value\r\n        })\r\n        // setEnteredValue(event.target.value)\r\n    }\r\n\r\n    const InputBlurHandler = (event) => {\r\n        dispatch({ \r\n            type: \"INPUT_BLUR\", \r\n        })\r\n        // setTouched(true)\r\n    }\r\n\r\n    const reset = () => { \r\n        dispatch({ \r\n            type: \"INPUT_BLUR\", \r\n        })\r\n\r\n        // setEnteredValue(\"\")\r\n        // setTouched(false)\r\n    }\r\n      \r\n    return {\r\n        value: state.enteredValue,\r\n        hasError: state.hasError,\r\n        valueChangedHandler,\r\n        InputBlurHandler, \r\n        reset, \r\n        isValid: state.valueIsValid,\r\n       \r\n    }\r\n}\r\n\r\nexport default useInput\r\n"]},"metadata":{},"sourceType":"module"}